%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2406 1920
%%HiResBoundingBox: 0 0 2405.04 1920
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2405.04 1920 re
W
q
[0.24 0 0 -0.24 0 1920] cm
q
0 0 10020.833 7996.0435 re
W*
q
[19.982828 0 0 19.979586 3006.25 323.20486] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
100.253998 0 m
44.973999 0 0 44.973999 0 100.253998 c
0 155.533997 44.973999 200.508 100.253998 200.508 c
155.533997 200.508 200.508 155.533997 200.508 100.253998 c
200.508 44.973999 155.533997 0 100.253998 0 c
h
100.253998 195.508 m
47.730999 195.508 5 152.776993 5 100.253998 c
5 47.731003 47.730999 5 100.253998 5 c
152.776993 5 195.508 47.73 195.508 100.253998 c
195.508 152.778 152.776993 195.508 100.253998 195.508 c
h
f
Q
q
[50.66518 0 0 50.656956 3732.5615 370.34073] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
30.791 60 m
18.632999 42.715 l
15.966999 42.715 l
15.966999 60 l
4.804999 60 l
4.804999 16.933998 l
15.966999 16.933998 l
15.966999 33.046997 l
18.545099 33.046997 l
31.143099 16.933996 l
44.7071 16.933996 l
28.2131 37.558998 l
45.000099 60 l
30.7911 60 l
30.791 60 l
h
f
Q
q
[60.190617 0 0 60.180847 130.642792 4279.1904] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
24.559999 12 m
14.719999 24.24 l
24.439999 40 l
19.359999 40 l
11.759998 27.92 l
7.519999 33.200001 l
7.519999 40 l
3.199998 40 l
3.199998 12 l
7.519999 12 l
7.519999 26.52 l
19.279999 12 l
24.559999 12 l
h
52.335999 35.84 m
52.615997 40 l
35.455997 40 l
35.455997 12 l
51.815998 12 l
52.135998 16.16 l
39.775997 16.16 l
39.775997 22.119999 l
47.935997 22.119999 l
47.935997 26.279999 l
39.775997 26.279999 l
39.775997 35.84 l
52.335999 35.84 l
h
85.632004 12 m
75.832001 27.639999 l
75.832001 40 l
71.512001 40 l
71.512001 27.639999 l
61.712002 11.999999 l
66.592003 11.999999 l
73.672005 23.399998 l
80.752007 11.999998 l
85.632004 11.999998 l
85.632004 12 l
h
73.711998 26.6 m
73.671997 26.559999 l
73.631996 26.6 l
73.711998 26.6 l
h
123.047997 11.6 m
123.528 11.6 l
123.528 40 l
119.248001 40 l
119.248001 22.879999 l
110.048004 34.360001 l
109.808006 34.360001 l
100.608009 22.880001 l
100.608009 40 l
96.328011 40 l
96.328011 11.6 l
96.808014 11.6 l
109.928017 27.48 l
123.047997 11.6 l
h
154.304001 40 m
152.104004 34.880001 l
140.664001 34.880001 l
138.464005 40 l
133.824005 40 l
146.144012 11.6 l
146.624008 11.6 l
158.944 40 l
154.304001 40 l
h
142.384003 30.879999 m
150.384003 30.879999 l
146.384003 21.599998 l
142.384003 30.879999 l
h
f
Q
q
[40.411552 0 0 40.404995 1418.25867 6883.3257] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
11.14 18.76 m
11.14 9.84 l
7.96 18.84 l
7.78 19.34 7.12 19.460001 6.92 18.84 c
3.84 9.84 l
3.84 18.76 l
3.84 19.18 3.52 19.4 3.18 19.4 c
2.84 19.4 2.5 19.18 2.5 18.76 c
2.5 8.020001 l
2.5 7.64 2.78 7.360001 3.18 7.360001 c
3.82 7.360001 l
4.26 7.360001 4.5 7.680001 4.6 7.980001 c
5.56 10.84 6.440001 13.380001 7.42 16.26 c
10.32 7.92 l
10.42 7.64 10.599999 7.36 11.02 7.36 c
11.82 7.36 l
12.4 7.36 12.48 7.68 12.48 8 c
12.48 18.76 l
12.48 19.18 12.139999 19.4 11.799999 19.4 c
11.459999 19.4 11.139999 19.18 11.139999 18.76 c
11.14 18.76 l
h
19.667 15.86 m
19.667 8 l
19.667 7.579999 20.007 7.36 20.327 7.36 c
20.667 7.36 20.987 7.579999 20.987 8 c
20.987 15.86 l
20.987 17.299999 21.966999 18.16 23.327 18.16 c
23.827 18.16 l
25.226999 18.16 26.187 17.18 26.187 15.86 c
26.187 8 l
26.187 7.579999 26.507 7.36 26.847 7.36 c
27.167 7.36 27.507 7.579999 27.507 8 c
27.507 15.86 l
27.507 17.92 26.047001 19.5 23.827 19.5 c
23.327 19.5 l
21.107 19.5 19.667 17.959999 19.667 15.86 c
h
34.334 17.68 m
33.894001 16.860001 35.014 16.26 35.534 17.08 c
35.793999 17.5 36.574001 18.219999 37.813999 18.219999 c
38.334 18.219999 39.633999 17.84 39.813999 16.359999 c
39.933998 15.459999 39.073997 14.579999 37.593998 13.839998 c
35.514 12.859999 33.933998 11.999998 33.933998 10.279999 c
33.933998 8.239999 35.653999 7.279999 37.493999 7.279999 c
39.153999 7.279999 40.073997 8.299999 40.394001 8.819999 c
40.854 9.559999 39.854 10.279999 39.294003 9.559999 c
39.014004 9.199999 38.474003 8.599999 37.494003 8.599999 c
36.394005 8.599999 35.254002 9.119999 35.254002 10.279999 c
35.254002 11.199999 36.274002 11.719999 37.794003 12.439999 c
39.574001 13.319999 41.434002 14.179998 41.154003 16.519999 c
40.934002 18.359999 39.534004 19.539999 37.814003 19.539999 c
36.514004 19.539999 34.914001 18.839998 34.334003 17.679998 c
34.334 17.68 l
h
47.861 18.780001 m
47.861 8.000001 l
47.861 7.580001 48.181 7.360001 48.500999 7.360001 c
48.820999 7.360001 49.160999 7.580001 49.160999 8.000001 c
49.160999 18.780001 l
49.160999 19.640001 47.861 19.640001 47.861 18.780001 c
h
60.048 7.32 m
61.868 7.32 63.807999 8.020001 63.807999 10.08 c
63.807999 10.56 63.487999 10.78 63.147999 10.78 c
62.807999 10.78 62.447998 10.54 62.447998 10.08 c
62.447998 9.92 62.348 8.62 60.047997 8.62 c
58.227997 8.62 57.427998 9.34 57.427998 11.06 c
57.427998 15.879999 l
57.427998 17.619999 58.407997 18.16 60.047997 18.16 c
61.707996 18.16 62.627998 17.48 62.627998 15.86 c
62.627998 15.4 62.967999 15.179999 63.287998 15.179999 c
63.627998 15.179999 63.947998 15.4 63.947998 15.86 c
63.947998 18.559999 62.447998 19.459999 60.047997 19.459999 c
57.447998 19.459999 56.127998 18.5 56.127998 15.879999 c
56.127998 11.06 l
56.127998 8.219999 57.547997 7.32 60.047997 7.32 c
60.048 7.32 l
h
80.302002 7.36 m
86.342003 7.36 l
86.762001 7.36 86.962006 7.7 86.962006 8.04 c
86.962006 8.379999 86.762009 8.7 86.342003 8.7 c
84.062004 8.7 l
84.062004 18.76 l
84.062004 19.18 83.722008 19.4 83.382004 19.4 c
83.042 19.4 82.722 19.18 82.722 18.76 c
82.722 8.7 l
80.302002 8.7 l
79.882004 8.7 79.681999 8.38 79.681999 8.04 c
79.681999 7.7 79.881996 7.36 80.302002 7.36 c
h
93.249001 15.86 m
93.249001 10.9 l
93.249001 8.5 94.488998 7.219999 96.889 7.219999 c
97.408997 7.219999 l
99.788994 7.219999 101.048996 8.499999 101.048996 10.9 c
101.048996 15.86 l
101.048996 18.059999 99.588997 19.5 97.408997 19.5 c
96.889 19.5 l
94.668999 19.5 93.249001 18.040001 93.249001 15.86 c
h
96.889 18.16 m
97.408997 18.16 l
98.848999 18.16 99.709 17.26 99.709 15.86 c
99.709 10.9 l
99.709 9.34 98.948997 8.539999 97.408997 8.539999 c
96.889 8.539999 l
95.369003 8.539999 94.528999 9.359999 94.528999 10.9 c
94.528999 15.86 l
94.528999 17.32 95.448997 18.16 96.889 18.16 c
h
114.875999 8 m
114.875999 18.76 l
114.875999 19.18 114.556 19.4 114.236 19.4 c
113.996002 19.4 113.676003 19.219999 113.536003 18.959999 c
112.036003 16.019999 110.916 13.759999 109.416 10.799999 c
109.416 18.759998 l
109.416 19.179998 109.096001 19.399998 108.755997 19.399998 c
108.435997 19.399998 108.095993 19.179998 108.095993 18.759998 c
108.095993 7.999998 l
108.095993 7.299998 109.095993 7.259998 109.315994 7.679998 c
113.535995 16.019999 l
113.535995 7.999998 l
113.535995 7.579998 113.855995 7.359998 114.195999 7.359998 c
114.536003 7.359998 114.875999 7.579998 114.875999 7.999998 c
114.875999 8 l
h
128.082993 18.860001 m
127.302994 16.32 l
123.582993 16.32 l
122.842995 18.82 l
122.582993 19.68 121.262993 19.42 121.542992 18.539999 c
122.582993 15.039999 123.602989 11.48 124.622993 7.939999 c
124.742996 7.559999 125.062996 7.359999 125.382996 7.359999 c
125.682999 7.359999 126.002998 7.559999 126.122993 7.939999 c
129.302994 18.539999 l
129.522995 19.299999 128.342987 19.719999 128.082993 18.859999 c
128.082993 18.860001 l
h
125.422997 10.06 m
123.982994 14.980001 l
126.922997 14.980001 l
126.422997 13.3 125.962997 11.860001 125.422997 10.06 c
h
135.990005 18.76 m
135.990005 8 l
135.990005 7.58 136.310013 7.36 136.630005 7.36 c
136.949997 7.36 137.290009 7.58 137.290009 8 c
137.290009 18.060001 l
141.270004 18.060001 l
141.710007 18.060001 141.949997 18.400002 141.949997 18.740002 c
141.949997 19.080002 141.709991 19.400002 141.270004 19.400002 c
136.650009 19.400002 l
136.250015 19.400002 135.990005 19.080002 135.990005 18.760002 c
135.990005 18.76 l
h
148.156998 18.780001 m
148.156998 8.000001 l
148.156998 7.580001 148.477005 7.360001 148.796997 7.360001 c
149.116989 7.360001 149.457001 7.580001 149.457001 8.000001 c
149.457001 18.780001 l
149.457001 19.640001 148.156998 19.640001 148.156998 18.780001 c
h
156.343994 7.36 m
162.383987 7.36 l
162.803986 7.36 163.003983 7.7 163.003983 8.04 c
163.003983 8.379999 162.803986 8.7 162.383987 8.7 c
160.103989 8.7 l
160.103989 18.76 l
160.103989 19.18 159.763992 19.4 159.423996 19.4 c
159.084 19.4 158.763992 19.18 158.763992 18.76 c
158.763992 8.7 l
156.343994 8.7 l
155.923996 8.7 155.723999 8.38 155.723999 8.04 c
155.723999 7.7 155.923996 7.36 156.343994 7.36 c
h
175.19099 8.3 m
172.711 13.440001 l
172.711 18.76 l
172.711 19.200001 172.39099 19.4 172.071 19.4 c
171.731 19.4 171.411 19.18 171.411 18.76 c
171.411 13.440001 l
168.871 8.320001 l
168.451 7.440001 169.67101 6.920001 170.091 7.760001 c
172.071 11.720001 l
173.97099 7.780001 l
174.411 6.860001 175.61099 7.440001 175.19099 8.300001 c
175.19099 8.3 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
